var _ = require('underscore');

var sessions = {};
var sessionRegExp = /sessionId=(\d+)/;

/* exports */
module.exports.create = createSession;
module.exports.close = closeSession;
module.exports.process = process;
module.exports.set = set;
module.exports.get = get;

/* functions */
function createSession(req) {
	var sessionToken = new Date().getTime().toString();	
	sessions[sessionToken] = {};
	updateReqWithSessionId(req, sessionToken)
}

function updateReqWithSessionId(req, sessionId) {
	req.sessionId = sessionId;
}
function process(req) {
	/*
		add to request sessionId if exist (this mean that session is open)
		else add null
	*/
	var cookie = req.headers.cookie || "";
	var matches = cookie.match(sessionRegExp);


	if(matches && matches.length > 1 && (matches[1] in sessions)) {
		updateReqWithSessionId(req, matches[1])
	} else {
		req.sessionId = null;
	};
}

function closeSession(req) {
	req.sessionId && (delete sessions[req.sessionId]);
}

function set(req, name, value) {
	var sessionToken = req.sessionId;

	if(!(sessionToken in sessions)) throw new Error("wrong session token");

	if(_.isObject(name) ) {
		forExtend = name;
	} else {
		forExtend = {};
		forExtend[name] = value;
	}

	_.extend(sessions[sessionToken], forExtend)
}

function get(req, name) {
	var sessionToken = req.sessionId;
	if(!(sessionToken in sessions)) throw new Error("wrong session token");

	if(name) {
		return sessions[sessionToken][name];
	} else {
		/* if no name is setted will return all session variables */
		return sessions[sessionToken];
	}
}
