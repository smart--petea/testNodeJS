var sessions = require('sessions'),
	fs = require('fs'),
	path = require('path'),
	_ = require('underscore'),
	url = require('url'),
	db = require('db'),
	qs = require('querystring'),
	colRegexp = /^\/books(\/\d+)?.*/i;


/* exports */
module.exports.process = function(req, res) {
	var matches = req.url.match(colRegexp);
	if(matches[1]) {
		//book info
		bookProcess(req, res, matches[1].slice(1));
	} else {
		//collection info
		bookCollProcess(req, res);
	}
}

/* functions */
function bookProcess(req, res, id) {
	switch(req.method) {
		case "GET":
			var book = db.select("books", function(book) {
				return book.id == id;
			})[0];

			res.writeHeader(200, {
				"Content-Type": "application/json",
			});
			res.end(JSON.stringify(book));
			break;
		case "DELETE":
			db.del("books", function(book) {
				return book.id == id;
			});

			res.statusCode = 200;
			res.end(id);
			break;
		case "PUT":
			var postData = "";
			req.on('data', function(chunk) {
				postData += chunk;
			});

			req.on('end', function() {
				postData = JSON.parse(postData);
				db.update("books", function(book) {
					return book.id == id;
				}, postData);

				res.writeHeader(200, {
					"Content-Type": "application/json",
				});
				res.end(JSON.stringify(postData));
			});

			req.on('error', function() {
				res.statusCode = 400;
				res.end("bad request");
			});
			break;
		default:
			res.statusCode = 400;
			res.end("bad request");
	}
}

function bookCollProcess(req, res) {
	switch(req.method) {
		case "GET":
			var urlParse = url.parse(req.url, true);
			var nameRegEx = eval(urlParse.query.name);
			var perPage = +urlParse.query.perPage;
			var pageNumber = +urlParse.query.pageNumber;
			var sort = +urlParse.query.sort;
			var lowerBound, upperBound;

			if(perPage === Infinity) {
				lowerBound = 0;
				upperBound = Infinity;
			} else {
				lowerBound = pageNumber * perPage;
				upperBound = (pageNumber + 1) * perPage;
			}

			var books = db.select('books', function(book, index) { 
				return !!book.name.match(nameRegEx);
			});

			if(sort !== 0) {
				books = _.sortBy(books, function(book) {
					return book.name;
				});
			}

			if(sort < 0) {
				books = _.sortBy(books, function(book, index) {
					return -index;
				});
			}

			books = _.filter(books, function(book, index) {
				return index >= lowerBound && index < upperBound;
			});

			res.writeHeader(200, {
				"Content-Type": "application/json",
			});
			res.end(JSON.stringify(books));	
			break;
		default:
			res.statusCode = 400;
			res.end("not implmented");
			break;
	}
}
